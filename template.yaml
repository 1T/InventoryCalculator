AWSTemplateFormatVersion: '2010-09-09'
Description: inventorycalculator microservice.

Parameters:
  ServiceName:
    Type: String
  StageName:
    Type: String
  CodeBucketName:
    Type: String
  CodeKey:
    Type: String
  SwaggerKey:
    Type: String
  EnvironmentType:
    Description: Environment type.
    Type: String
    AllowedValues: [dev, prod]
    ConstraintDescription: must specify prod or dev.

Resources:
##########################################################################################
# Shared Resources / Roles
##########################################################################################
  CrossAccountLoggingPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: "AssumeCrossAccountLoggingRole"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - 'sts:AssumeRole'
            Resource: arn:aws:iam::405028608951:role/us-east-1-LoggingCrossAccount
      Roles:
        - !Ref inventorycalculatorBaseRole

  inventorycalculatorBaseRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Sid: "AllowLambdaServiceToAssumeRole"
            Effect: "Allow"
            Action:
              - "sts:AssumeRole"
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Policies:
        - PolicyName: "inventorycalculatorTables"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt inventorycalculatorTable.Arn
        - PolicyName: "inventorycalculatorJobs"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - lambda:InvokeFunction
                  Resource:
                    - !GetAtt CrawlJob.Arn
                    - !GetAtt AsyncWorker.Arn
                    - !GetAtt StatusCheckFunction.Arn
        - PolicyName: "inventorycalculatorBuckets"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                  Resource:
                    - !GetAtt inventorycalculatorBucket.Arn

##########################################################################################
# API Gateway configuration
##########################################################################################
  Api:
    Type: AWS::ApiGateway::RestApi
    Properties:
      BodyS3Location:
        Bucket: !Ref CodeBucketName
        Key: !Ref SwaggerKey

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref Api

  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Action: "sts:AssumeRole"
          Principal:
            Service:
              - apigateway.amazonaws.com

  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref Api
      DeploymentId: !Ref ApiDeployment
      StageName: prod
      Variables:
        ApiRoleName: !Ref ApiRole
        CrawlJobName: !Ref CrawlJob
        AsyncWorkerName: !Ref AsyncWorker
        StatusCheckFunctionName: !Ref StatusCheckFunction

  CrawlJobInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CrawlJob.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref Api
          - "/*/*"

  AsyncWorkerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt AsyncWorker.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref Api
          - "/*/*"

  StatusCheckFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt StatusCheckFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref Api
          - "/*/*"

##########################################################################################
# Lambda functions
##########################################################################################
  CrawlJob:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt inventorycalculatorBaseRole.Arn
      Handler: inventorycalculator.handlers.crawl_job_handler
      Runtime: python3.7
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeKey
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          ENV_TYPE: !Ref EnvironmentType
          S3_BUCKET: !Ref inventorycalculatorBucket
          TABLE_NAME: !Ref inventorycalculatorTable
          ASYNC_WORKER: !Ref AsyncWorker

  AsyncWorker:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt inventorycalculatorBaseRole.Arn
      Handler: inventorycalculator.handlers.async_worker_handler
      Runtime: python3.7
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeKey
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          ENV_TYPE: !Ref EnvironmentType
          S3_BUCKET: !Ref inventorycalculatorBucket
          TABLE_NAME: !Ref inventorycalculatorTable

  StatusCheckFunction:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt inventorycalculatorBaseRole.Arn
      Handler: inventorycalculator.handlers.status_check_handler
      Runtime: python3.7
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: !Ref CodeKey
      MemorySize: 128
      Timeout: 300
      Environment:
        Variables:
          ENV_TYPE: !Ref EnvironmentType
          S3_BUCKET: !Ref inventorycalculatorBucket
          TABLE_NAME: !Ref inventorycalculatorTable

#############################################################################
# Dynamo Tables
#############################################################################
  inventorycalculatorTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      KeySchema:
        -
          AttributeName: "job_id"
          KeyType: "HASH"
      AttributeDefinitions:
        -
          AttributeName: "job_id"
          AttributeType: "S"
        -
          AttributeName: "status"
          AttributeType: "S"
        -
          AttributeName: "total_value"
          AttributeType: "N"
      ProvisionedThroughput:
        ReadCapacityUnits: !If [UseProdCondition, 15, 5]
        WriteCapacityUnits: !If [UseProdCondition, 15, 5]

#############################################################################
# S3 Buckets
#############################################################################
  inventorycalculatorBucket:
    Type: AWS::S3::Bucket
